{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c2336b68",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import numpy as np\n",
    "import sys\n",
    "sys.path.append(\"..\")\n",
    "import d2lzh_pytorch as d2l"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c8b44aa",
   "metadata": {},
   "source": [
    "### 3.9.1 获取和读取数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "37fd85bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "batch_size = 256\n",
    "train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60cb0174",
   "metadata": {},
   "source": [
    "### 3.9.2 定义模型参数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e28acf5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 使用长度为 3.9 多层感知机的从零开始实现 - 图2 的向量表示每一张图像。因此，输入个数为784，输出个数为10。\n",
    "# 实验中设超参数隐藏单元个数为256。\n",
    "num_inputs, num_outputs, num_hiddens = 784, 10, 256\n",
    "W1 = torch.tensor(np.random.normal(0, 0.01, (num_inputs, num_hiddens)), dtype=torch.float)\n",
    "b1 = torch.zeros(num_hiddens, dtype=torch.float)\n",
    "W2 = torch.tensor(np.random.normal(0, 0.01, (num_hiddens, num_outputs)), dtype=torch.float)\n",
    "b2 = torch.zeros(num_outputs, dtype=torch.float)\n",
    "params = [W1, b1, W2, b2]\n",
    "for param in params:\n",
    "    param.requires_grad_(requires_grad=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5908c11",
   "metadata": {},
   "source": [
    "### 3.9.3 定义激活函数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "930abbb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 使用基础的max函数来实现ReLU，而非直接调用relu函数\n",
    "def relu(X):\n",
    "    return torch.max(input=X, other=torch.tensor(0.0))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7def894",
   "metadata": {},
   "source": [
    "### 3.9.4 定义模型"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "311d43cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 通过view函数将每张原始图像改成长度为num_inputs的向量。然后实现多层感知机的计算表达式。\n",
    "def net(X):\n",
    "    X = X.view((-1, num_inputs))\n",
    "    H = relu(torch.matmul(X, W1) + b1)\n",
    "    return torch.matmul(H, W2) + b2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97f63d82",
   "metadata": {},
   "source": [
    "### 3.9.5 定义损失函数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0522f163",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 为了得到更好的数值稳定性，直接使用PyTorch提供的包括softmax运算和交叉熵损失计算的函数。\n",
    "loss = torch.nn.CrossEntropyLoss()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec3df782",
   "metadata": {},
   "source": [
    "### 3.9.6 训练模型"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e230b256",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch 1, loss 0.0030, train acc 0.714, test acc 0.728\n",
      "epoch 2, loss 0.0019, train acc 0.823, test acc 0.778\n",
      "epoch 3, loss 0.0017, train acc 0.841, test acc 0.827\n",
      "epoch 4, loss 0.0015, train acc 0.858, test acc 0.815\n",
      "epoch 5, loss 0.0014, train acc 0.864, test acc 0.850\n"
     ]
    }
   ],
   "source": [
    "# 直接调用d2lzh_pytorch包中的train_ch3函数（函数实现见ch3.6）。\n",
    "# 设超参数迭代周期数为5，学习率为100.0。\n",
    "# 注：由于原书的mxnet中的SoftmaxCrossEntropyLoss在反向传播的时候相对于沿batch维求和了，而PyTorch默认的是求平均，\n",
    "# 所以用PyTorch计算得到的loss比mxnet小很多（大概是maxnet计算得到的1/batch_size这个量级），所以反向传播得到的梯度也小很多，\n",
    "# 为了得到差不多的学习效果，把学习率调得成原书的约batch_size倍，原书的学习率为0.5，这里设置成100.0。\n",
    "# 之所以这么大，应该是因为d2lzh_pytorch里面的sgd函数在更新的时候除以了batch_size，\n",
    "# 其实PyTorch在计算loss的时候已经除过一次了，sgd这里应该不用除了\n",
    "num_epochs, lr = 5, 100.0\n",
    "d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, batch_size, params, lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d51621f4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12fb1455",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a43946ab",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f404fa96",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a75daa9c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
